# app/bot/handlers/payment.py

import datetime
from aiogram import Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter

from app.core.settings       import settings, MINI_COURSES
from app.bot.handlers.states import PaymentStates
from app.db.base             import SessionLocal
from app.db.models           import PaymentProof, Subscription
from app.keyboards.menu      import main_menu

router = Router()


@router.callback_query(lambda c: c.data and c.data.startswith("pay_"))
async def ask_confirm_payment(call: types.CallbackQuery, state: FSMContext):
    await call.answer()  # —É–±–∏—Ä–∞–µ–º ‚Äú–∫—Ä—É—Ç–∏–ª–∫—É‚Äù
    course_id = call.data.split("_", 1)[1]
    course = MINI_COURSES.get(course_id)
    if not course:
        return await call.message.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # 1) –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
    await call.message.answer(
        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å *{course['title']}* –∑–∞ {course['price']}‚ÇΩ:\n{course['pay_link']}",
        parse_mode="Markdown"
    )

    # 2) –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫—É ‚Äú–Ø –æ–ø–ª–∞—Ç–∏–ª‚Äù
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{course_id}")
    kb.adjust(1)
    await call.message.answer(
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.",
        reply_markup=kb.as_markup()
    )

    # 3) –í—Ö–æ–¥–∏–º –≤ FSM
    await state.update_data(course_id=course_id)
    await state.set_state(PaymentStates.waiting_for_screenshot)


@router.callback_query(lambda c: c.data and c.data.startswith("paid_"))
async def on_paid_button(call: types.CallbackQuery):
    await call.answer()  # —É–±–∏—Ä–∞–µ–º ‚Äú–∫—Ä—É—Ç–∏–ª–∫—É‚Äù
    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø—Ä–æ—Å–∏–º —Ñ–æ—Ç–æ
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã.")


@router.message(
    StateFilter(PaymentStates.waiting_for_screenshot),
    lambda m: bool(m.photo)
)
async def receive_screenshot(message: types.Message, state: FSMContext):
    data      = await state.get_data()
    course_id = data["course_id"]
    user_id   = message.from_user.id
    file_id   = message.photo[-1].file_id
    ts        = datetime.datetime.utcnow()

    # 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    with SessionLocal() as db:
        proof = PaymentProof(
            user_id=user_id,
            course_id=course_id,
            file_id=file_id,
            timestamp=ts,
            status="pending"
        )
        db.add(proof)
        db.commit()
        db.refresh(proof)

    # 2) –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    admin_kb = InlineKeyboardBuilder()
    admin_kb.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{proof.id}")
    admin_kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{proof.id}")
    # –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    admin_kb.button(
        text="üîó –ü—Ä–æ—Ñ–∏–ª—å",
        url=f"tg://user?id={proof.user_id}")
    admin_kb.adjust(3)

    await message.bot.send_photo(
        chat_id=settings.ADMIN_CHAT_ID,
        photo=file_id,
        caption=(
            f"–ù–æ–≤—ã–π —Å–∫—Ä–∏–Ω #{proof.id} –∫—É—Ä—Å–∞ ¬´{proof.course_id}¬ª\n"
            f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {proof.user_id}"
        ),
        reply_markup=admin_kb.as_markup()
    )

    # 3) –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
        reply_markup=main_menu()
    )
    await state.clear()