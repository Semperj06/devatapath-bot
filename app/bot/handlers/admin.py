# app/bot/handlers/admin.py
from aiogram import Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta


from aiogram.filters import Command
from app.core.settings import settings
from app.db.base       import SessionLocal
from app.db.models     import PaymentProof, Subscription

router = Router()


@router.message(lambda m: m.photo)
async def forward_to_admin(message: types.Message):
    # ... –≤–∞—à –∫–æ–¥ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–∫—Ä–∏–Ω–∞ ...

    # –í –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
    await message.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")


@router.callback_query(lambda c: c.data.startswith("approve_"))
async def on_approve(call: types.CallbackQuery):
    proof_id = int(call.data.split("_", 1)[1])

    # 1) –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∏—Å–∫—É
    with SessionLocal() as db:
        proof = db.get(PaymentProof, proof_id)
        # –°—Ä–∞–∑—É –∑–∞–±–∏—Ä–∞–µ–º user_id –∏ course_id
        user_id   = proof.user_id
        course_id = proof.course_id

        proof.status = "approved"
        sub = Subscription(
            user_id=user_id,
            course_id=course_id,
            start_date=datetime.utcnow(),
            end_date=datetime.utcnow() + timedelta(days=30),
        )
        db.add(sub)
        db.commit()

    # 2) –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å–µ—Å—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π user_id
    await call.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
    await call.bot.send_message(
        chat_id=user_id,
        text="‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –æ—Ç–∫—Ä—ã—Ç!"
    )


@router.callback_query(lambda c: c.data.startswith("reject_"))
async def on_reject(call: types.CallbackQuery):
    proof_id = int(call.data.split("_", 1)[1])

    # 1) –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    with SessionLocal() as db:
        proof = db.get(PaymentProof, proof_id)
        user_id = proof.user_id  # —Å—Ä–∞–∑—É –∑–∞–±–∏—Ä–∞–µ–º user_id
        proof.status = "rejected"
        db.commit()

    # 2) –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å–µ—Å—Å–∏–∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.answer("‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω")
    await call.bot.send_message(
        chat_id=user_id,
        text="‚ùå –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω, –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–≤—ã–π."
    )


@router.message(Command("queue"))
async def show_queue(message: types.Message):
    """
    /queue ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ pending-–∑–∞–ø—Ä–æ—Å—ã
    """
    with SessionLocal() as db:
        pendings = (
            db.query(PaymentProof)
              .filter_by(status="pending")
              .order_by(PaymentProof.id)
              .all()
        )

    if not pendings:
        return await message.answer("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")

    text = "\n".join(
        f"#{p.id} –æ—Ç {p.user_id} –¥–ª—è –∫—É—Ä—Å–∞ {p.course_id}"
        for p in pendings
    )
    await message.answer(f"üìã –í –æ—á–µ—Ä–µ–¥–∏:\n{text}")


@router.callback_query(lambda c: c.data.startswith("cancelsub_"))
async def on_cancel_sub(call: types.CallbackQuery):
    """
    callback_data = "cancelsub_{user_id}"
    """
    user_id = int(call.data.split("_", 1)[1])
    with SessionLocal() as db:
        sub = db.query(Subscription).filter_by(user_id=user_id).first()
        if not sub:
            return await call.answer("‚ùó –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
        db.delete(sub)
        db.commit()

    await call.answer("üóë –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await call.bot.send_message(
        user_id,
        "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ (–º–æ–∂–Ω–æ –≤—Å—Ç—Ä–æ–∏—Ç—å –≤ –ª—é–±–æ–π –≤–∞—à –∞–¥–º–∏–Ω-—Ä–µ–ø–æ—Ä—Ç)
def cancel_sub_kb(user_id: int) -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(
        text="‚úÇÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        callback_data=f"cancelsub_{user_id}"
    )
    kb.adjust(1)
    return kb.as_markup()