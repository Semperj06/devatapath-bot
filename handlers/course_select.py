# handlers/course_select.py

from aiogram import Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards.menu import main_menu        # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–Ω–µ –º–µ–Ω—è–ª–∏)
from config import MINI_COURSES             # —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–∏–Ω–∏-–∫—É—Ä—Å–∞—Ö

router = Router()  # –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –º–∏–Ω–∏-–∫—É—Ä—Å–æ–≤


@router.callback_query(lambda c: c.data and c.data.startswith("mini_"))
async def mini_detail(callback: types.CallbackQuery):
    """
    1) –õ–æ–≤–∏–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É mini_X
    2) –°–æ–±–∏—Ä–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –∏ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª + ¬´–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É¬ª
    3) –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–≥–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    # 1) —É–±–∏—Ä–∞–µ–º ¬´–∫—Ä—É—Ç–∏–ª–∫—É¬ª
    await callback.answer()

    # 2) –ø–æ–ª—É—á–∞–µ–º ID –∫—É—Ä—Å–∞
    course_id = callback.data.split("_", 1)[1]
    course = MINI_COURSES.get(course_id)
    if not course:
        return await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # 3) —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    text = (
        f"*{course['title']}*\n\n"
        f"{course['desc']}\n\n"
        f"*–¶–µ–Ω–∞:* {course['price']} ‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    # 4) –±–∏–ª–¥–∏–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    # 5) –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã
    builder.button(
        text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
        callback_data=f"pay_{course_id}"
    )
    # 6) –∫–Ω–æ–ø–∫–∞ ¬´–Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É¬ª
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
        callback_data="back_to_mini_list"
    )
    # 7) –æ–¥–∏–Ω —Å—Ç–æ–ª–±–∏–∫ –∫–Ω–æ–ø–æ–∫
    builder.adjust(1)
    kb = builder.as_markup()

    # 8) —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=kb
    )


@router.callback_query(lambda c: c.data == "back_to_mini_list")
async def back_to_list_handler(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É.
    –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ç–æ—Ç –∂–µ —Ö–µ–Ω–¥–ª–µ—Ä, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫.
    """
    await callback.answer()  # —É–±–∏—Ä–∞–µ–º ¬´–∫—Ä—É—Ç–∏–ª–∫—É¬ª

    # –∏–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    from handlers.menu_handlers import mini_courses_handler

    # mini_courses_handler –æ–∂–∏–¥–∞–µ—Ç Message, –∞ —É –Ω–∞—Å CallbackQuery, –ø–æ—ç—Ç–æ–º—É
    # –ø–µ—Ä–µ–¥–∞–µ–º callback.message
    await mini_courses_handler(callback.message)


@router.callback_query(lambda c: c.data and c.data.startswith("pay_"))
async def pay_handler(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª. –ë–µ—Ä–µ–º —Å—Å—ã–ª–∫—É –∏–∑ MINI_COURSES –∏ —à–ª–µ–º —é–∑–µ—Ä—É.
    """
    await callback.answer()
    course_id = callback.data.split("_", 1)[1]
    course = MINI_COURSES.get(course_id)
    if not course:
        return await callback.message.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ï—Å–ª–∏ —É —Ç–µ–±—è –≤ config.py –∫–ª—é—á –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'link' –∏–ª–∏ 'pay_link',
    # –ø—Ä–æ–≤–µ—Ä—å —á—Ç–æ–±—ã —Å–ª–æ–≤–∞—Ä—å MINI_COURSES —Ç–æ–∂–µ —Å–æ–¥–µ—Ä–∂–∞–ª —ç—Ç–æ—Ç –∫–ª—é—á!
    pay_link = course.get("pay_link") or course.get("link")
    if not pay_link:
        return await callback.message.answer("‚ùå –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω–∞.")

    await callback.message.answer(
        f"üí≥ –ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å *{course['title']}*, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n"
        f"{pay_link}",
        parse_mode="Markdown",
        reply_markup=main_menu()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    )



@router.callback_query(lambda c: c.data and c.data.startswith("mini_"))
async def mini_detail(callback: types.CallbackQuery):
    # 1) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback (—É–±–∏—Ä–∞–µ–º –∫—Ä—É–∂–æ–∫)
    await callback.answer()

    # 2) –ø–æ–ª—É—á–∞–µ–º ID –∫—É—Ä—Å–∞
    course_id = callback.data.split("_", 1)[1]
    course = MINI_COURSES.get(course_id)
    if not course:
        return await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # 3) –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
    text = (
        f"*{course['title']}*\n\n"
        f"{course['desc']}\n\n"
        f"*–¶–µ–Ω–∞:* {course['price']} ‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )

    # 4) –±–∏–ª–¥e—Ä inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()
    # –∫–Ω–æ–ø–∫–∞ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
    builder.button(
        text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
        url=course['pay_link']
    )
    # –∫–Ω–æ–ø–∫–∞ "–Ø –æ–ø–ª–∞—Ç–∏–ª" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω–∞
    builder.button(
        text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
        callback_data=f"paid_{course_id}"
    )
    # –≤–µ—Ä–Ω—ë–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.button(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="show_main_menu"
    )
    # —Ä–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
    builder.adjust(1)

    # 5) –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    kb = builder.as_markup()
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=kb
    )